// convert Hack Machine Code into Assembly Language
#include "iobuffer.h"
#include "symbols.h"
#include "tokeniser-d.h"
#include <vector>
#include <iostream>

// to make out programs a bit neater
using namespace std ;

using namespace CS_IO_Buffers ;
using namespace CS_Symbol_Tables ;
using namespace Hack_Disassembler ;

// This program must disassemble Hack Machine Code and output the equivalent Hack Assembly Language.
//
// A-instructions must be translated into symbolic form using the following rules:
//
// 1. IF symbols is false
//    THEN
//     - the A-instruction is output in numeric form.
//
// 2. IF an A-instruction is followed by a C-instruction and the jump bits of the C-instruction are not "000"
//    THEN
//     - IF the value of the A-instruction is the address an instruction in the program
//       THEN
//        - the instruction must be allocated a label and the A-instruction must use this label
//        - the first labelled location in memory must be labelled L0, the next L1 and so on
//
// 3. IF an A-instruction is followed by a C-instruction that reads or writes memory
//    THEN
//     - IF the address has a predefined name
//       THEN
//        - the A-instruction must use the predefined name
//        - where there is a choice, use SP, LCL, ARG, THIS and THAT in preference to R0, R1, R2 R3 and R4
//    - IF the address is the address of an existing variable location
//      THEN
//       - the A-instructon must use the variable's name
//    - IF the address is the address of the next free variable location
//      THEN
//       - the A-instructon must use the next free variable's name and
//       - the address of the next free variable must be incremented by 1
//       - the first variable name allocated will be for address 16 and will be called v_0
//       - the second variable name allocated will be for address 17 and will be called v_1
//       - and so on
//
// 4. ELSE the A-instruction is output in numeric form.
//
// C-instructions must be translated using the following rules:
//
// 1. IF the destination bits are "000"
//    THEN
//     - do not output a destination component for the C-instruction
//
// 2. IF the ALU operation is not recognised
//   THEN
//    - replace the ALU operation with: "< ** UNDEFINED ALU OPERATION ** >"
//
// Do not output a jump component for a C-instruction if it the jump bits are "000"
// 3. IF the jump bits are "000"
//    THEN
//     - do not output a jump componentfor the C-instruction
//

// Hack Machine Code:
// program  ::= (instr tk_eol?)* tk_eoi
// instr    ::= tk_a_instr | tk_c_instr

// parse Hack Machine Code and return a vector of tokens, one per instruction
vector<Token> parse_program()
{
    vector<Token> instructions ;

    while ( have(tk_instruction) )
    {
        instructions.push_back(mustbe(tk_instruction)) ;
        if ( have(tk_eol) ) next_token() ;
    }
    mustbe(tk_eoi) ;
//    cout << instructions << endl;
    return instructions ;
}

/*****************   REPLACE THE FOLLOWING CODE  ******************/
void initialise_tables();
static symbols dest_bits;
static symbols alu_op_bits;
static symbols jump_bits;
static symbols pre_defined;
static symbols label_table;

static void disassembler_a(Token instructions, int num);

static void disassembler_c(Token instructions);

void initialise_tables()
{
    pre_defined = create_strings();
    insert_strings(pre_defined, "0", "SP");
    insert_strings(pre_defined, "1", "LCL");
    insert_strings(pre_defined, "2", "ARG");
    insert_strings(pre_defined, "3", "THIS");
    insert_strings(pre_defined, "4", "THAT");
    insert_strings(pre_defined, "16384", "SCREEN");
    insert_strings(pre_defined, "24576", "KBD");
    
    alu_op_bits = create_strings();
    insert_strings(alu_op_bits,"0101010","0");
    insert_strings(alu_op_bits,"0111111","1");
    insert_strings(alu_op_bits,"0111010","-1");
    insert_strings(alu_op_bits,"0001100","D");
    insert_strings(alu_op_bits,"0110000","A");
    insert_strings(alu_op_bits,"0001101","!D");
    insert_strings(alu_op_bits,"0110001","!A");
    insert_strings(alu_op_bits,"0001111","-D");
    insert_strings(alu_op_bits,"0110011","-A");
    insert_strings(alu_op_bits,"0011111","D+1");
    insert_strings(alu_op_bits,"0110111","A+1");
    insert_strings(alu_op_bits,"0001110","D-1");
    insert_strings(alu_op_bits,"0110010","A-1");
    insert_strings(alu_op_bits,"0000010","D+A");
    insert_strings(alu_op_bits,"0010011","D-A");
    insert_strings(alu_op_bits,"0000111","A-D");
    insert_strings(alu_op_bits,"0000000","D&A");
    insert_strings(alu_op_bits,"0010101","D|A");
    insert_strings(alu_op_bits,"1110000","M");
    insert_strings(alu_op_bits,"1110001","!M");
    insert_strings(alu_op_bits,"1110011","-M");
    insert_strings(alu_op_bits,"1110111","M+1");
    insert_strings(alu_op_bits,"1110010","M-1");
    insert_strings(alu_op_bits,"1000010","D+M");
    insert_strings(alu_op_bits,"1010011","D-M");
    insert_strings(alu_op_bits,"1000111","M-D");
    insert_strings(alu_op_bits,"1000000","D&M");
    insert_strings(alu_op_bits,"1010101","D|M");
    
    dest_bits = create_strings();
    insert_strings(dest_bits, "000", "NULL");
    insert_strings(dest_bits, "001", "M");
    insert_strings(dest_bits, "010", "D");
    insert_strings(dest_bits, "011", "MD");
    insert_strings(dest_bits, "100", "A");
    insert_strings(dest_bits, "101", "AM");
    insert_strings(dest_bits, "110", "AD");
    insert_strings(dest_bits, "111", "AMD");
    
    jump_bits = create_strings();
    insert_strings(jump_bits, "000", "NULL" );
    insert_strings(jump_bits, "001", "JGT" );
    insert_strings(jump_bits, "010", "JEQ" );
    insert_strings(jump_bits, "011", "JGE" );
    insert_strings(jump_bits, "100", "JLT" );
    insert_strings(jump_bits, "101", "JNE" );
    insert_strings(jump_bits, "110", "JLE" );
    insert_strings(jump_bits, "111", "JMP" );
    
}

// disassemble a Hack Machine Code program without using any symbols
static void disassemble_no_symbols(vector<Token> instructions)
{
    initialise_tables();
    for (int i = 0; i < instructions.size(); ++i)
    {
        if(have(instructions[i], tk_a_instr))
        {
            int a_value = token_ivalue(instructions[i]);
            string wspace = "        ";//8 whitespace
            string a = "@";
            string result = wspace+a+to_string(a_value);
            write_to_output(result+'\n');
        }
        else if (have(instructions[i], tk_c_instr))
        {
            string abit = token_a_bit(instructions[i]);
            string aluop = token_alu_op(instructions[i]);
            string aluopbits = abit+aluop;
            string aluopbits_result;
            if(aluopbits=="1111111")
            {
                aluopbits_result = "< ** UNDEFINED ALU OPERATION ** >";
            }
            else
            {
                aluopbits_result = lookup_strings(alu_op_bits,aluopbits);
            }
            string dest = token_dest(instructions[i]);
            string dest_result = lookup_strings(dest_bits,dest);
            string jump = token_jump(instructions[i]);
            string jump_result = lookup_strings(jump_bits, jump);
            if(jump_result=="NULL")
            {
                string wspace = "        ";//8 whitespace
                string result = wspace + dest_result + "=" + aluopbits_result;
                write_to_output(result+'\n');
            }
            else
            {
                string wspace = "        ";//8 whitespace
                string result = wspace + aluopbits_result + ";" + jump_result;
                write_to_output(result+'\n');
            }
        }
    }
}

static void disassembler_a(vector<Token> instructions, int num)
{
    for (int i = num; i < instructions.size()-1; ++i)
    {
//        abit: read memory
        string abit = token_a_bit(instructions[i+1]);
        //dest: write memory
        string dest = token_dest(instructions[i+1]);
        if (have(instructions[i], tk_a_instr)&&(abit=="1"||dest.back()=='1')) {
        
            int a_value = token_ivalue(instructions[i]);
//            cout << a_value << endl;
            string a_val = to_string(a_value);
            string result = lookup_strings(pre_defined,a_val);
            string wspace = "        ";//8 whitespace
            string a = "@";
//            string result = wspace+a+to_string(a_value);
            string res = wspace+a+result;
//            cout << "a_predefined" << endl;
            write_to_output(res+'\n');
            break;
        }
        else if(have(instructions[i], tk_a_instr)||abit!="1"||dest.back()!='1')
        {
            int a_value = token_ivalue(instructions[i]);
            string wspace = "        ";//8 whitespace
            string a = "@";
            string result = wspace+a+to_string(a_value);
//            cout << "a_number" << endl;
            write_to_output(result+'\n');
            break;
        
        }
    }
//        string spelling = token_spelling(instructions[i]);
//        TokenKind tokenKind = token_kind(instructions[i]);


    
}
static void disassembler_c(Token instruction)
{
//    for (int i = 0; i < instructions.size(); ++i)
//    {
//        if (have(instructions[i], tk_c_instr))
//        {
            string abit = token_a_bit(instruction);
            string aluop = token_alu_op(instruction);
            string aluopbits = abit+aluop;
            
            string aluopbits_result;
            if(aluopbits=="1111111")
            {
                aluopbits_result = "< ** UNDEFINED ALU OPERATION ** >";
            }
            else
            {
                aluopbits_result = lookup_strings(alu_op_bits,aluopbits);
//                cout << "aluopbits_result: " << aluopbits_result << endl;
            }
            string dest = token_dest(instruction);
            string dest_result = lookup_strings(dest_bits,dest);
//            cout << "dest_result: " << dest_result << endl;
            string jump = token_jump(instruction);
            string jump_result = lookup_strings(jump_bits, jump);
//            cout << "jump_result: " << jump_result << endl;
            if(jump_result=="NULL")
            {
                string wspace = "        ";//8 whitespace
                string result = wspace + dest_result + "=" + aluopbits_result;
                write_to_output(result+'\n');
            }
            else
            {
                string wspace = "        ";//8 whitespace
                string result = wspace + aluopbits_result + ";" + jump_result;
                write_to_output(result+'\n');
            }
            
//        }
//    }
}


// convert Hack Machine Code into Assembly Language
// use predefined names, generic label names and generic variable names
static void disassemble_symbols(vector<Token> instructions)
{
    initialise_tables();
    
//    for (int i = 0; i < instructions.size()-1; ++i)
//    {
//        if(have(instructions[i], tk_a_instr))
//        {
//            //abit: read memory
//            string abit = token_a_bit(instructions[i+1]);
//            //dest: write memory
//            string dest = token_dest(instructions[i+1]);
//            disassembler_a(instructions[i],abit,dest);
//        }
//
//    }
    //a-instruction
    for (int i = 0; i < instructions.size(); ++i) {
        
        if(have(instructions[i], tk_a_instr))
        {
            disassembler_a(instructions, i);
        }
        else if(have(instructions[i], tk_c_instr))
        {
            disassembler_c(instructions[i]);
        }
    }
//    disassembler_a(instructions);
//    disassembler_c(instructions);
//    for (int i = 0; i < instructions.size()-1; ++i) {
////        string spelling = token_spelling(instructions[i]);
////        TokenKind tokenKind = token_kind(instructions[i]);
//        string abit = token_a_bit(instructions[i+1]);
//        string dest = token_dest(instructions[i+1]);
//        if (have(instructions[i], tk_a_instr)&&(abit=="1"||dest.back()=='1')) {
//
//            int a_value = token_ivalue(instructions[i]);
////            cout << a_value << endl;
//            string a_val = to_string(a_value);
//            string result = lookup_strings(pre_defined,a_val);
//            string wspace = "        ";//8 whitespace
//            string a = "@";
////            string result = wspace+a+to_string(a_value);
//            string res = wspace+a+result;
//            write_to_output(res+'\n');
//            break;
//        }
//        if(have(instructions[i], tk_a_instr))
//        {
//            int a_value = token_ivalue(instructions[i]);
//            string wspace = "        ";//8 whitespace
//            string a = "@";
//            string result = wspace+a+to_string(a_value);
//            write_to_output(result+'\n');
////            break;
//        }
//    }
//    //c-instruction
//    for (int i = 0; i < instructions.size(); ++i)
//    {
//        if (have(instructions[i], tk_c_instr))
//        {
//            string abit = token_a_bit(instructions[i]);
//            string aluop = token_alu_op(instructions[i]);
//            string aluopbits = abit+aluop;
//
//            string aluopbits_result;
//            if(aluopbits=="1111111")
//            {
//                aluopbits_result = "< ** UNDEFINED ALU OPERATION ** >";
//            }
//            else
//            {
//                aluopbits_result = lookup_strings(alu_op_bits,aluopbits);
////                cout << "aluopbits_result: " << aluopbits_result << endl;
//            }
//            string dest = token_dest(instructions[i]);
//            string dest_result = lookup_strings(dest_bits,dest);
////            cout << "dest_result: " << dest_result << endl;
//            string jump = token_jump(instructions[i]);
//            string jump_result = lookup_strings(jump_bits, jump);
////            cout << "jump_result: " << jump_result << endl;
//            if(jump_result=="NULL")
//            {
//                string wspace = "        ";//8 whitespace
//                string result = wspace + dest_result + "=" + aluopbits_result;
//                write_to_output(result+'\n');
//            }
//            else
//            {
//                string wspace = "        ";//8 whitespace
//                string result = wspace + aluopbits_result + ";" + jump_result;
//                write_to_output(result+'\n');
//            }
//
//        }
//    }
}

/*****************        DOWN TO HERE         ******************/


// main program
int main(int argc,char **argv)
{
    // initialise tokeniser
    next_token() ;

    // is the first command line argument "N", ie Numeric Output ?
    if ( argc > 1 && string(argv[1]) == "N" )
    {
        // YES, output all A-instructions in numeric form
        disassemble_no_symbols(parse_program()) ;
    }
    else
    {
        // NO, output A-instructions in symbolic form where possible
        disassemble_symbols(parse_program()) ;
    }

    // flush the output and any errors
    print_output() ;
    print_errors() ;
}

